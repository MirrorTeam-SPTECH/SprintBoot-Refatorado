package com.exemple.apipagamento.portalchurras.infrastructure.config;

import io.swagger.v3.oas.models.Components;
import io.swagger.v3.oas.models.OpenAPI;
import io.swagger.v3.oas.models.info.Contact;
import io.swagger.v3.oas.models.info.Info;
import io.swagger.v3.oas.models.info.License;
import io.swagger.v3.oas.models.security.SecurityScheme;
import io.swagger.v3.oas.models.servers.Server;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

import java.util.List;

/**
 * Configura√ß√£o da documenta√ß√£o OpenAPI/Swagger.
 * Acesse em: /swagger-ui.html
 */
@Configuration
public class OpenApiConfig {

    @Value("${server.port:8080}")
    private String serverPort;

    @Bean
    public OpenAPI customOpenAPI() {
        return new OpenAPI()
                .info(new Info()
                        .title("Portal Churras API")
                        .description("""
                                API RESTful completa para gerenciamento de food truck.
                                
                                ## Funcionalidades:
                                - üîê **Autentica√ß√£o JWT** - Login seguro com tokens Bearer
                                - üìã **Card√°pio** - CRUD completo de itens do menu
                                - üõí **Pedidos** - Gest√£o de pedidos com itens
                                - üí≥ **Pagamentos** - Integra√ß√£o com Mercado Pago (PIX e prefer√™ncias)
                                - üë• **Usu√°rios** - Gest√£o de clientes e funcion√°rios
                                - üîî **Webhooks** - Notifica√ß√µes de pagamento
                                
                                ## Como usar:
                                1. Fa√ßa login em `/api/auth/login` para obter o token
                                2. Clique em **Authorize** no topo da p√°gina
                                3. Cole o token (sem 'Bearer ') e clique em **Authorize**
                                4. Agora voc√™ pode testar os endpoints protegidos
                                
                                ## Perfis de usu√°rio:
                                - **CUSTOMER** - Cliente (pode fazer pedidos)
                                - **EMPLOYEE** - Funcion√°rio (gerencia pedidos e pagamentos)
                                - **ADMIN** - Administrador (acesso total)
                                """)
                        .version("1.0.0")
                        .contact(new Contact()
                                .name("MirrorTeam - SPTECH")
                                .email("suporte@portalchurras.com")
                                .url("https://github.com/MirrorTeam-SPTECH"))
                        .license(new License()
                                .name("MIT License")
                                .url("https://opensource.org/licenses/MIT")))
                .servers(List.of(
                        new Server()
                                .url("http://localhost:" + serverPort)
                                .description("Servidor de Desenvolvimento"),
                        new Server()
                                .url("https://api.portalchurras.com")
                                .description("Servidor de Produ√ß√£o")
                ))
                .components(new Components()
                        .addSecuritySchemes("Bearer", new SecurityScheme()
                                .type(SecurityScheme.Type.HTTP)
                                .scheme("bearer")
                                .bearerFormat("JWT")
                                .description("Token JWT obtido atrav√©s do endpoint /api/auth/login")));
    }
}
